type token =
  | IMPORT of (Support.Error.info)
  | TBOT of (Support.Error.info)
  | LAMBDA of (Support.Error.info)
  | TTOP of (Support.Error.info)
  | AS of (Support.Error.info)
  | USTRING of (Support.Error.info)
  | UNIT of (Support.Error.info)
  | REF of (Support.Error.info)
  | UUNIT of (Support.Error.info)
  | RREF of (Support.Error.info)
  | CASE of (Support.Error.info)
  | OF of (Support.Error.info)
  | LET of (Support.Error.info)
  | IN of (Support.Error.info)
  | FIX of (Support.Error.info)
  | LETREC of (Support.Error.info)
  | IF of (Support.Error.info)
  | THEN of (Support.Error.info)
  | ELSE of (Support.Error.info)
  | TRUE of (Support.Error.info)
  | FALSE of (Support.Error.info)
  | BOOL of (Support.Error.info)
  | TIMESFLOAT of (Support.Error.info)
  | SSOURCE of (Support.Error.info)
  | SSINK of (Support.Error.info)
  | UFLOAT of (Support.Error.info)
  | SUCC of (Support.Error.info)
  | PRED of (Support.Error.info)
  | ISZERO of (Support.Error.info)
  | INERT of (Support.Error.info)
  | TYPE of (Support.Error.info)
  | NAT of (Support.Error.info)
  | THREAD of (Support.Error.info)
  | ACQUIRE of (Support.Error.info)
  | FORK of (Support.Error.info)
  | WAIT of (Support.Error.info)
  | TID of (Support.Error.info)
  | MUTEX of (Support.Error.info)
  | UCID of (string Support.Error.withinfo)
  | LCID of (string Support.Error.withinfo)
  | INTV of (int Support.Error.withinfo)
  | FLOATV of (float Support.Error.withinfo)
  | STRINGV of (string Support.Error.withinfo)
  | APOSTROPHE of (Support.Error.info)
  | DQUOTE of (Support.Error.info)
  | ARROW of (Support.Error.info)
  | BANG of (Support.Error.info)
  | BARGT of (Support.Error.info)
  | BARRCURLY of (Support.Error.info)
  | BARRSQUARE of (Support.Error.info)
  | COLON of (Support.Error.info)
  | COLONCOLON of (Support.Error.info)
  | COLONEQ of (Support.Error.info)
  | COLONHASH of (Support.Error.info)
  | COMMA of (Support.Error.info)
  | DARROW of (Support.Error.info)
  | DDARROW of (Support.Error.info)
  | DOT of (Support.Error.info)
  | EOF of (Support.Error.info)
  | EQ of (Support.Error.info)
  | EQEQ of (Support.Error.info)
  | EXISTS of (Support.Error.info)
  | GT of (Support.Error.info)
  | HASH of (Support.Error.info)
  | LCURLY of (Support.Error.info)
  | LCURLYBAR of (Support.Error.info)
  | LEFTARROW of (Support.Error.info)
  | LPAREN of (Support.Error.info)
  | LSQUARE of (Support.Error.info)
  | LSQUAREBAR of (Support.Error.info)
  | LT of (Support.Error.info)
  | RCURLY of (Support.Error.info)
  | RPAREN of (Support.Error.info)
  | RSQUARE of (Support.Error.info)
  | SEMI of (Support.Error.info)
  | SLASH of (Support.Error.info)
  | STAR of (Support.Error.info)
  | TRIANGLE of (Support.Error.info)
  | USCORE of (Support.Error.info)
  | VBAR of (Support.Error.info)
  | MMUTEX of (Support.Error.info)
  | TTHREAD of (Support.Error.info)

open Parsing;;
let _ = parse_error;;
# 7 "parser.mly"
open Support.Error
open Support.Pervasive
open Syntax
# 92 "parser.ml"
let yytransl_const = [|
    0|]

let yytransl_block = [|
  257 (* IMPORT *);
  258 (* TBOT *);
  259 (* LAMBDA *);
  260 (* TTOP *);
  261 (* AS *);
  262 (* USTRING *);
  263 (* UNIT *);
  264 (* REF *);
  265 (* UUNIT *);
  266 (* RREF *);
  267 (* CASE *);
  268 (* OF *);
  269 (* LET *);
  270 (* IN *);
  271 (* FIX *);
  272 (* LETREC *);
  273 (* IF *);
  274 (* THEN *);
  275 (* ELSE *);
  276 (* TRUE *);
  277 (* FALSE *);
  278 (* BOOL *);
  279 (* TIMESFLOAT *);
  280 (* SSOURCE *);
  281 (* SSINK *);
  282 (* UFLOAT *);
  283 (* SUCC *);
  284 (* PRED *);
  285 (* ISZERO *);
  286 (* INERT *);
  287 (* TYPE *);
  288 (* NAT *);
  289 (* THREAD *);
  290 (* ACQUIRE *);
  291 (* FORK *);
  292 (* WAIT *);
  293 (* TID *);
  294 (* MUTEX *);
  295 (* UCID *);
  296 (* LCID *);
  297 (* INTV *);
  298 (* FLOATV *);
  299 (* STRINGV *);
  300 (* APOSTROPHE *);
  301 (* DQUOTE *);
  302 (* ARROW *);
  303 (* BANG *);
  304 (* BARGT *);
  305 (* BARRCURLY *);
  306 (* BARRSQUARE *);
  307 (* COLON *);
  308 (* COLONCOLON *);
  309 (* COLONEQ *);
  310 (* COLONHASH *);
  311 (* COMMA *);
  312 (* DARROW *);
  313 (* DDARROW *);
  314 (* DOT *);
    0 (* EOF *);
  315 (* EQ *);
  316 (* EQEQ *);
  317 (* EXISTS *);
  318 (* GT *);
  319 (* HASH *);
  320 (* LCURLY *);
  321 (* LCURLYBAR *);
  322 (* LEFTARROW *);
  323 (* LPAREN *);
  324 (* LSQUARE *);
  325 (* LSQUAREBAR *);
  326 (* LT *);
  327 (* RCURLY *);
  328 (* RPAREN *);
  329 (* RSQUARE *);
  330 (* SEMI *);
  331 (* SLASH *);
  332 (* STAR *);
  333 (* TRIANGLE *);
  334 (* USCORE *);
  335 (* VBAR *);
  336 (* MMUTEX *);
  337 (* TTHREAD *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\002\000\004\000\004\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\007\000\007\000\007\000\007\000\
\007\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\014\000\014\000\010\000\010\000\016\000\016\000\017\000\017\000\
\013\000\013\000\013\000\018\000\018\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\012\000\012\000\020\000\019\000\019\000\021\000\
\021\000\022\000\022\000\005\000\005\000\009\000\009\000\000\000"

let yylen = "\002\000\
\001\000\003\000\002\000\001\000\002\000\002\000\002\000\002\000\
\001\000\002\000\002\000\002\000\002\000\005\000\005\000\005\000\
\002\000\003\000\001\000\001\000\001\000\001\000\003\000\001\000\
\001\000\003\000\001\000\001\000\003\000\006\000\006\000\009\000\
\001\000\001\000\006\000\006\000\003\000\004\000\006\000\006\000\
\008\000\006\000\004\000\009\000\009\000\001\000\002\000\002\000\
\002\000\002\000\003\000\002\000\002\000\002\000\002\000\005\000\
\003\000\001\000\000\000\001\000\001\000\003\000\003\000\001\000\
\003\000\003\000\001\000\001\000\003\000\003\000\001\000\001\000\
\001\000\007\000\001\000\001\000\001\000\003\000\001\000\004\000\
\004\000\004\000\001\000\003\000\007\000\000\000\001\000\001\000\
\003\000\003\000\001\000\000\000\002\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\073\000\000\000\000\000\000\000\
\000\000\000\000\000\000\075\000\076\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\079\000\077\000\072\000\000\000\001\000\000\000\000\000\000\000\
\096\000\000\000\004\000\000\000\000\000\067\000\000\000\003\000\
\000\000\000\000\000\000\071\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000\000\
\000\000\005\000\000\000\000\000\091\000\000\000\087\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\019\000\020\000\021\000\022\000\000\000\
\024\000\000\000\000\000\027\000\028\000\000\000\000\000\025\000\
\000\000\000\000\000\000\000\000\009\000\000\000\000\000\000\000\
\000\000\093\000\007\000\008\000\000\000\078\000\000\000\000\000\
\070\000\000\000\002\000\000\000\065\000\066\000\057\000\000\000\
\000\000\000\000\000\000\000\000\000\000\038\000\000\000\000\000\
\000\000\000\000\000\000\000\000\010\000\000\000\011\000\000\000\
\012\000\017\000\013\000\000\000\064\000\000\000\060\000\000\000\
\000\000\000\000\080\000\000\000\000\000\000\000\043\000\081\000\
\082\000\090\000\089\000\069\000\000\000\000\000\095\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\026\000\000\000\
\018\000\023\000\029\000\000\000\000\000\000\000\035\000\000\000\
\000\000\036\000\000\000\084\000\039\000\040\000\000\000\042\000\
\000\000\000\000\000\000\063\000\062\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\014\000\015\000\016\000\000\000\
\000\000\000\000\074\000\000\000\000\000\000\000\041\000\031\000\
\030\000\000\000\044\000\045\000\000\000\000\000\000\000\000\000\
\032\000"

let yydgoto = "\002\000\
\033\000\034\000\035\000\066\000\063\000\149\000\109\000\110\000\
\083\000\154\000\036\000\134\000\037\000\038\000\039\000\151\000\
\152\000\074\000\070\000\135\000\071\000\072\000"

let yysindex = "\022\000\
\001\000\000\000\005\255\223\254\000\000\240\004\010\004\229\254\
\000\005\013\255\010\004\000\000\000\000\000\005\000\005\000\005\
\000\005\251\254\010\004\004\255\000\005\245\254\008\255\246\254\
\000\000\000\000\000\000\000\005\000\000\055\004\010\004\032\255\
\000\000\000\255\000\000\185\004\018\255\000\000\075\255\000\000\
\033\255\049\255\039\255\000\000\003\255\018\255\080\255\037\255\
\038\255\018\255\047\255\081\255\201\004\018\255\018\255\018\255\
\142\003\086\255\010\004\018\255\064\255\142\003\000\000\142\003\
\010\004\000\000\018\255\045\255\000\000\034\255\000\000\055\255\
\046\255\041\255\052\255\001\000\147\004\018\255\017\255\142\003\
\142\003\066\255\057\255\142\003\060\255\058\255\010\004\010\004\
\142\003\010\004\018\255\000\000\000\000\000\000\000\000\151\003\
\000\000\185\003\194\003\000\000\000\000\221\003\091\255\000\000\
\069\255\142\003\069\255\059\255\000\000\238\254\010\004\063\255\
\073\255\000\000\000\000\000\000\010\004\000\000\055\004\010\004\
\000\000\010\004\000\000\000\005\000\000\000\000\000\000\082\255\
\049\255\247\254\083\255\000\005\098\255\000\000\065\255\128\255\
\129\255\087\255\130\255\095\003\000\000\095\003\000\000\095\003\
\000\000\000\000\000\000\099\255\000\000\084\255\000\000\096\255\
\085\255\090\255\000\000\221\003\114\255\049\255\000\000\000\000\
\000\000\000\000\000\000\000\000\092\255\010\004\000\000\107\255\
\108\255\010\004\018\255\101\255\058\255\010\004\010\004\010\004\
\010\004\066\255\100\255\102\255\104\255\142\003\000\000\069\255\
\000\000\000\000\000\000\094\255\106\255\169\255\000\000\142\003\
\142\003\000\000\136\255\000\000\000\000\000\000\163\255\000\000\
\221\003\221\003\221\003\000\000\000\000\132\255\226\254\142\003\
\121\255\123\255\122\255\010\004\000\000\000\000\000\000\221\003\
\221\003\144\255\000\000\010\004\010\004\133\255\000\000\000\000\
\000\000\112\255\000\000\000\000\147\004\145\255\000\005\221\003\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\118\255\042\003\
\000\000\000\000\000\000\000\000\000\000\124\255\000\000\000\000\
\000\000\000\000\000\000\015\255\105\000\000\000\039\000\000\000\
\000\000\000\000\000\000\000\000\000\000\171\000\000\000\000\000\
\000\000\237\000\000\000\000\000\000\000\047\001\113\001\179\001\
\000\000\000\000\000\000\245\001\000\000\000\000\000\000\000\000\
\000\000\000\000\055\002\094\004\000\000\000\000\000\000\126\255\
\127\255\000\000\000\000\000\000\000\000\121\002\000\000\000\000\
\000\000\131\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\187\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\134\255\000\000\140\255\000\000\000\000\168\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\145\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\211\000\000\000\
\000\000\000\000\000\000\140\255\000\000\140\255\000\000\140\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\240\254\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\253\002\000\000\000\000\000\000\000\000\000\000\
\000\000\250\254\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\182\255\000\000\
\000\000"

let yygindex = "\000\000\
\128\000\000\000\251\255\000\000\000\000\211\255\105\255\178\255\
\243\255\107\000\183\255\040\000\250\255\000\000\000\000\030\000\
\000\000\097\000\000\000\000\000\099\000\000\000"

let yytablesize = 1606
let yytable = "\046\000\
\029\000\047\000\050\000\124\000\187\000\052\000\041\000\053\000\
\054\000\055\000\056\000\108\000\048\000\058\000\060\000\217\000\
\114\000\141\000\115\000\143\000\145\000\067\000\001\000\146\000\
\069\000\073\000\034\000\156\000\034\000\078\000\168\000\085\000\
\034\000\034\000\127\000\128\000\042\000\218\000\131\000\025\000\
\064\000\082\000\075\000\138\000\043\000\061\000\091\000\040\000\
\065\000\157\000\049\000\158\000\051\000\112\000\061\000\025\000\
\125\000\126\000\061\000\116\000\153\000\025\000\057\000\025\000\
\224\000\225\000\062\000\059\000\169\000\034\000\092\000\075\000\
\093\000\076\000\094\000\079\000\034\000\095\000\096\000\080\000\
\233\000\136\000\137\000\081\000\139\000\034\000\034\000\082\000\
\034\000\084\000\097\000\086\000\098\000\099\000\100\000\087\000\
\088\000\089\000\090\000\111\000\101\000\102\000\113\000\117\000\
\118\000\159\000\103\000\104\000\148\000\119\000\122\000\162\000\
\121\000\069\000\073\000\167\000\165\000\078\000\130\000\120\000\
\129\000\132\000\213\000\214\000\215\000\171\000\179\000\133\000\
\180\000\147\000\181\000\155\000\105\000\160\000\161\000\106\000\
\204\000\172\000\107\000\166\000\170\000\174\000\175\000\173\000\
\189\000\176\000\209\000\210\000\177\000\182\000\184\000\186\000\
\188\000\190\000\183\000\231\000\185\000\192\000\193\000\195\000\
\191\000\201\000\219\000\202\000\194\000\203\000\206\000\207\000\
\197\000\198\000\199\000\200\000\033\000\208\000\033\000\211\000\
\212\000\216\000\220\000\033\000\221\000\033\000\226\000\222\000\
\230\000\033\000\033\000\033\000\033\000\229\000\232\000\092\000\
\094\000\085\000\086\000\085\000\088\000\033\000\068\000\085\000\
\085\000\059\000\033\000\123\000\059\000\033\000\223\000\033\000\
\033\000\033\000\033\000\150\000\196\000\205\000\227\000\228\000\
\164\000\163\000\000\000\000\000\033\000\000\000\033\000\000\000\
\078\000\033\000\033\000\000\000\000\000\033\000\000\000\033\000\
\000\000\000\000\033\000\000\000\085\000\000\000\033\000\033\000\
\033\000\033\000\000\000\085\000\000\000\000\000\033\000\000\000\
\000\000\000\000\000\000\000\000\085\000\085\000\000\000\085\000\
\000\000\003\000\000\000\004\000\085\000\000\000\000\000\005\000\
\006\000\000\000\000\000\007\000\000\000\008\000\000\000\009\000\
\010\000\011\000\000\000\000\000\012\000\013\000\000\000\014\000\
\000\000\000\000\000\000\015\000\016\000\017\000\018\000\000\000\
\000\000\000\000\019\000\020\000\021\000\000\000\022\000\023\000\
\024\000\025\000\026\000\027\000\000\000\058\000\000\000\028\000\
\000\000\000\000\058\000\000\000\058\000\000\000\000\000\000\000\
\058\000\058\000\058\000\058\000\000\000\000\000\000\000\000\000\
\030\000\000\000\000\000\031\000\058\000\000\000\032\000\000\000\
\000\000\058\000\000\000\000\000\058\000\000\000\058\000\058\000\
\058\000\058\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\058\000\000\000\058\000\000\000\000\000\
\058\000\000\000\000\000\000\000\058\000\000\000\058\000\000\000\
\000\000\058\000\000\000\000\000\058\000\058\000\058\000\046\000\
\058\000\000\000\000\000\000\000\046\000\058\000\046\000\000\000\
\000\000\000\000\046\000\046\000\046\000\046\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\046\000\000\000\
\000\000\000\000\000\000\046\000\000\000\000\000\046\000\000\000\
\046\000\046\000\046\000\046\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\037\000\046\000\037\000\046\000\
\000\000\000\000\037\000\037\000\000\000\000\000\046\000\000\000\
\046\000\000\000\000\000\046\000\000\000\000\000\046\000\046\000\
\046\000\048\000\046\000\000\000\000\000\000\000\048\000\046\000\
\048\000\000\000\000\000\000\000\048\000\048\000\048\000\048\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\037\000\
\048\000\000\000\000\000\000\000\000\000\048\000\037\000\000\000\
\048\000\000\000\048\000\048\000\048\000\048\000\000\000\037\000\
\037\000\000\000\037\000\000\000\000\000\000\000\083\000\048\000\
\083\000\048\000\000\000\000\000\083\000\083\000\000\000\000\000\
\048\000\000\000\048\000\000\000\000\000\048\000\000\000\000\000\
\048\000\048\000\048\000\050\000\048\000\000\000\000\000\000\000\
\050\000\048\000\050\000\000\000\000\000\000\000\050\000\050\000\
\050\000\050\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\083\000\050\000\000\000\000\000\000\000\000\000\050\000\
\083\000\000\000\050\000\000\000\050\000\050\000\050\000\050\000\
\000\000\083\000\083\000\000\000\083\000\000\000\000\000\000\000\
\000\000\050\000\000\000\050\000\000\000\000\000\000\000\000\000\
\000\000\000\000\050\000\000\000\050\000\000\000\000\000\050\000\
\000\000\000\000\050\000\050\000\050\000\052\000\050\000\000\000\
\000\000\000\000\052\000\050\000\052\000\000\000\000\000\000\000\
\052\000\052\000\052\000\052\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\052\000\000\000\000\000\000\000\
\000\000\052\000\000\000\000\000\052\000\000\000\052\000\052\000\
\052\000\052\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\052\000\000\000\052\000\000\000\000\000\
\000\000\000\000\000\000\000\000\052\000\000\000\052\000\000\000\
\000\000\052\000\000\000\000\000\052\000\052\000\052\000\053\000\
\052\000\000\000\000\000\000\000\053\000\052\000\053\000\000\000\
\000\000\000\000\053\000\053\000\053\000\053\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\053\000\000\000\
\000\000\000\000\000\000\053\000\000\000\000\000\053\000\000\000\
\053\000\053\000\053\000\053\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\053\000\000\000\053\000\
\000\000\000\000\000\000\000\000\000\000\000\000\053\000\000\000\
\053\000\000\000\000\000\053\000\000\000\000\000\053\000\053\000\
\053\000\054\000\053\000\000\000\000\000\000\000\054\000\053\000\
\054\000\000\000\000\000\000\000\054\000\054\000\054\000\054\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\054\000\000\000\000\000\000\000\000\000\054\000\000\000\000\000\
\054\000\000\000\054\000\054\000\054\000\054\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\054\000\
\000\000\054\000\000\000\000\000\000\000\000\000\000\000\000\000\
\054\000\000\000\054\000\000\000\000\000\054\000\000\000\000\000\
\054\000\054\000\054\000\055\000\054\000\000\000\000\000\000\000\
\055\000\054\000\055\000\000\000\000\000\000\000\055\000\055\000\
\055\000\055\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\055\000\000\000\000\000\000\000\000\000\055\000\
\000\000\000\000\055\000\000\000\055\000\055\000\055\000\055\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\055\000\000\000\055\000\000\000\000\000\000\000\000\000\
\000\000\000\000\055\000\000\000\055\000\000\000\000\000\055\000\
\000\000\000\000\055\000\055\000\055\000\049\000\055\000\000\000\
\000\000\000\000\049\000\055\000\049\000\000\000\000\000\000\000\
\049\000\049\000\049\000\049\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\049\000\000\000\000\000\000\000\
\000\000\049\000\000\000\000\000\049\000\000\000\049\000\049\000\
\049\000\049\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\049\000\000\000\049\000\000\000\000\000\
\000\000\000\000\000\000\000\000\049\000\000\000\049\000\000\000\
\000\000\049\000\000\000\000\000\049\000\049\000\049\000\047\000\
\049\000\000\000\000\000\000\000\047\000\049\000\047\000\000\000\
\000\000\000\000\047\000\047\000\047\000\047\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\047\000\000\000\
\000\000\000\000\000\000\047\000\000\000\000\000\047\000\000\000\
\047\000\047\000\047\000\047\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\047\000\000\000\047\000\
\000\000\000\000\000\000\000\000\000\000\000\000\047\000\000\000\
\047\000\000\000\000\000\047\000\000\000\000\000\047\000\047\000\
\047\000\051\000\047\000\000\000\000\000\000\000\051\000\047\000\
\051\000\000\000\000\000\000\000\051\000\051\000\051\000\051\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\051\000\000\000\000\000\000\000\000\000\051\000\000\000\000\000\
\051\000\000\000\051\000\051\000\051\000\051\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\051\000\
\000\000\051\000\000\000\000\000\000\000\000\000\000\000\000\000\
\051\000\000\000\051\000\000\000\000\000\051\000\000\000\000\000\
\051\000\051\000\051\000\056\000\051\000\000\000\000\000\000\000\
\056\000\051\000\056\000\000\000\000\000\000\000\056\000\056\000\
\056\000\056\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\056\000\000\000\000\000\000\000\000\000\056\000\
\000\000\000\000\056\000\000\000\056\000\056\000\056\000\056\000\
\000\000\000\000\000\000\000\000\000\000\000\000\071\000\000\000\
\071\000\056\000\000\000\056\000\000\000\000\000\000\000\000\000\
\000\000\000\000\056\000\000\000\056\000\071\000\071\000\056\000\
\000\000\000\000\056\000\056\000\056\000\000\000\056\000\071\000\
\000\000\000\000\000\000\056\000\071\000\000\000\000\000\071\000\
\000\000\071\000\071\000\071\000\071\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\071\000\000\000\
\092\000\000\000\093\000\071\000\094\000\000\000\000\000\095\000\
\096\000\071\000\000\000\000\000\071\000\000\000\000\000\071\000\
\000\000\000\000\000\000\071\000\097\000\000\000\098\000\099\000\
\100\000\000\000\000\000\000\000\000\000\000\000\101\000\102\000\
\000\000\000\000\000\000\000\000\103\000\178\000\148\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\092\000\
\000\000\093\000\000\000\094\000\000\000\000\000\095\000\096\000\
\092\000\000\000\093\000\000\000\094\000\000\000\105\000\095\000\
\000\000\106\000\000\000\097\000\107\000\098\000\099\000\100\000\
\000\000\000\000\000\000\000\000\097\000\101\000\102\000\000\000\
\100\000\000\000\000\000\103\000\104\000\000\000\101\000\000\000\
\000\000\000\000\092\000\000\000\093\000\104\000\094\000\000\000\
\000\000\095\000\000\000\092\000\000\000\093\000\000\000\094\000\
\000\000\000\000\095\000\000\000\000\000\105\000\097\000\000\000\
\106\000\000\000\100\000\107\000\000\000\000\000\105\000\097\000\
\101\000\106\000\000\000\100\000\140\000\000\000\092\000\104\000\
\093\000\101\000\094\000\000\000\000\000\095\000\000\000\000\000\
\104\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\097\000\000\000\000\000\000\000\100\000\000\000\
\105\000\000\000\000\000\106\000\101\000\000\000\142\000\000\000\
\000\000\105\000\000\000\104\000\106\000\000\000\000\000\144\000\
\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\
\005\000\006\000\000\000\000\000\007\000\000\000\008\000\000\000\
\009\000\010\000\011\000\000\000\105\000\012\000\013\000\106\000\
\014\000\000\000\107\000\000\000\015\000\016\000\017\000\018\000\
\000\000\000\000\000\000\019\000\020\000\021\000\000\000\022\000\
\000\000\044\000\025\000\026\000\027\000\000\000\000\000\000\000\
\028\000\004\000\000\000\000\000\000\000\005\000\006\000\000\000\
\000\000\007\000\000\000\008\000\000\000\009\000\010\000\011\000\
\000\000\030\000\012\000\013\000\031\000\014\000\000\000\032\000\
\000\000\015\000\016\000\017\000\018\000\000\000\000\000\000\000\
\019\000\020\000\021\000\000\000\022\000\000\000\068\000\025\000\
\026\000\027\000\071\000\000\000\071\000\028\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\071\000\071\000\000\000\000\000\000\000\030\000\000\000\
\000\000\031\000\000\000\071\000\032\000\000\000\000\000\000\000\
\071\000\000\000\000\000\071\000\000\000\071\000\071\000\071\000\
\071\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\071\000\000\000\071\000\000\000\000\000\071\000\
\000\000\005\000\006\000\000\000\000\000\071\000\000\000\000\000\
\071\000\009\000\000\000\071\000\071\000\000\000\012\000\013\000\
\000\000\014\000\000\000\000\000\000\000\015\000\016\000\017\000\
\018\000\000\000\000\000\000\000\000\000\020\000\021\000\000\000\
\022\000\000\000\044\000\025\000\026\000\027\000\000\000\005\000\
\000\000\028\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\012\000\013\000\000\000\005\000\
\000\000\000\000\030\000\000\000\000\000\031\000\018\000\000\000\
\032\000\000\000\000\000\020\000\012\000\013\000\022\000\000\000\
\044\000\025\000\026\000\027\000\000\000\000\000\018\000\000\000\
\000\000\000\000\000\000\020\000\000\000\077\000\022\000\000\000\
\044\000\025\000\026\000\027\000\000\000\000\000\005\000\000\000\
\030\000\000\000\000\000\031\000\000\000\000\000\032\000\000\000\
\000\000\000\000\079\000\012\000\013\000\000\000\005\000\000\000\
\030\000\000\000\000\000\031\000\000\000\018\000\032\000\000\000\
\000\000\000\000\020\000\012\000\013\000\022\000\000\000\044\000\
\025\000\026\000\027\000\000\000\000\000\018\000\000\000\000\000\
\000\000\000\000\020\000\000\000\000\000\022\000\000\000\044\000\
\025\000\026\000\027\000\000\000\000\000\000\000\000\000\030\000\
\000\000\000\000\031\000\000\000\000\000\045\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\000\
\000\000\000\000\031\000\000\000\000\000\032\000"

let yycheck = "\006\000\
\000\000\007\000\009\000\077\000\156\000\011\000\040\001\014\000\
\015\000\016\000\017\000\057\000\040\001\019\000\021\000\046\001\
\062\000\096\000\064\000\098\000\099\000\028\000\001\000\102\000\
\030\000\031\000\012\001\046\001\014\001\036\000\040\001\045\000\
\018\001\019\001\080\000\081\000\070\001\068\001\084\000\046\001\
\051\001\039\001\040\001\089\000\078\001\062\001\053\000\043\001\
\059\001\068\001\078\001\070\001\040\001\059\000\071\001\062\001\
\040\001\041\001\070\001\065\000\106\000\068\001\068\001\070\001\
\216\000\217\000\059\001\064\001\078\001\055\001\002\001\040\001\
\004\001\074\001\006\001\058\001\062\001\009\001\010\001\005\001\
\232\000\087\000\088\000\051\001\090\000\071\001\072\001\039\001\
\074\001\051\001\022\001\012\001\024\001\025\001\026\001\059\001\
\059\001\051\001\018\001\014\001\032\001\033\001\039\001\059\001\
\071\001\111\000\038\001\039\001\040\001\055\001\059\001\117\000\
\072\001\119\000\120\000\129\000\122\000\124\000\062\001\074\001\
\055\001\062\001\201\000\202\000\203\000\132\000\140\000\070\001\
\142\000\039\001\144\000\073\001\064\001\071\001\062\001\067\001\
\182\000\040\001\070\001\058\001\058\001\014\001\014\001\079\001\
\158\000\059\001\192\000\193\000\019\001\051\001\055\001\062\001\
\039\001\062\001\071\001\229\000\072\001\051\001\051\001\059\001\
\166\000\062\001\208\000\062\001\170\000\062\001\073\001\062\001\
\174\000\175\000\176\000\177\000\005\001\005\001\007\001\040\001\
\014\001\046\001\058\001\012\001\058\001\014\001\039\001\062\001\
\073\001\018\001\019\001\020\001\021\001\057\001\046\001\074\001\
\062\001\012\001\071\001\014\001\071\001\030\001\072\001\018\001\
\019\001\062\001\035\001\076\000\071\001\038\001\212\000\040\001\
\041\001\042\001\043\001\105\000\173\000\184\000\220\000\221\000\
\120\000\119\000\255\255\255\255\053\001\255\255\055\001\255\255\
\231\000\058\001\059\001\255\255\255\255\062\001\255\255\064\001\
\255\255\255\255\067\001\255\255\055\001\255\255\071\001\072\001\
\073\001\074\001\255\255\062\001\255\255\255\255\079\001\255\255\
\255\255\255\255\255\255\255\255\071\001\072\001\255\255\074\001\
\255\255\001\001\255\255\003\001\079\001\255\255\255\255\007\001\
\008\001\255\255\255\255\011\001\255\255\013\001\255\255\015\001\
\016\001\017\001\255\255\255\255\020\001\021\001\255\255\023\001\
\255\255\255\255\255\255\027\001\028\001\029\001\030\001\255\255\
\255\255\255\255\034\001\035\001\036\001\255\255\038\001\039\001\
\040\001\041\001\042\001\043\001\255\255\007\001\255\255\047\001\
\255\255\255\255\012\001\255\255\014\001\255\255\255\255\255\255\
\018\001\019\001\020\001\021\001\255\255\255\255\255\255\255\255\
\064\001\255\255\255\255\067\001\030\001\255\255\070\001\255\255\
\255\255\035\001\255\255\255\255\038\001\255\255\040\001\041\001\
\042\001\043\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\053\001\255\255\055\001\255\255\255\255\
\058\001\255\255\255\255\255\255\062\001\255\255\064\001\255\255\
\255\255\067\001\255\255\255\255\070\001\071\001\072\001\007\001\
\074\001\255\255\255\255\255\255\012\001\079\001\014\001\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\030\001\255\255\
\255\255\255\255\255\255\035\001\255\255\255\255\038\001\255\255\
\040\001\041\001\042\001\043\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\012\001\053\001\014\001\055\001\
\255\255\255\255\018\001\019\001\255\255\255\255\062\001\255\255\
\064\001\255\255\255\255\067\001\255\255\255\255\070\001\071\001\
\072\001\007\001\074\001\255\255\255\255\255\255\012\001\079\001\
\014\001\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\055\001\
\030\001\255\255\255\255\255\255\255\255\035\001\062\001\255\255\
\038\001\255\255\040\001\041\001\042\001\043\001\255\255\071\001\
\072\001\255\255\074\001\255\255\255\255\255\255\012\001\053\001\
\014\001\055\001\255\255\255\255\018\001\019\001\255\255\255\255\
\062\001\255\255\064\001\255\255\255\255\067\001\255\255\255\255\
\070\001\071\001\072\001\007\001\074\001\255\255\255\255\255\255\
\012\001\079\001\014\001\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\055\001\030\001\255\255\255\255\255\255\255\255\035\001\
\062\001\255\255\038\001\255\255\040\001\041\001\042\001\043\001\
\255\255\071\001\072\001\255\255\074\001\255\255\255\255\255\255\
\255\255\053\001\255\255\055\001\255\255\255\255\255\255\255\255\
\255\255\255\255\062\001\255\255\064\001\255\255\255\255\067\001\
\255\255\255\255\070\001\071\001\072\001\007\001\074\001\255\255\
\255\255\255\255\012\001\079\001\014\001\255\255\255\255\255\255\
\018\001\019\001\020\001\021\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\030\001\255\255\255\255\255\255\
\255\255\035\001\255\255\255\255\038\001\255\255\040\001\041\001\
\042\001\043\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\053\001\255\255\055\001\255\255\255\255\
\255\255\255\255\255\255\255\255\062\001\255\255\064\001\255\255\
\255\255\067\001\255\255\255\255\070\001\071\001\072\001\007\001\
\074\001\255\255\255\255\255\255\012\001\079\001\014\001\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\030\001\255\255\
\255\255\255\255\255\255\035\001\255\255\255\255\038\001\255\255\
\040\001\041\001\042\001\043\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\053\001\255\255\055\001\
\255\255\255\255\255\255\255\255\255\255\255\255\062\001\255\255\
\064\001\255\255\255\255\067\001\255\255\255\255\070\001\071\001\
\072\001\007\001\074\001\255\255\255\255\255\255\012\001\079\001\
\014\001\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\030\001\255\255\255\255\255\255\255\255\035\001\255\255\255\255\
\038\001\255\255\040\001\041\001\042\001\043\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\053\001\
\255\255\055\001\255\255\255\255\255\255\255\255\255\255\255\255\
\062\001\255\255\064\001\255\255\255\255\067\001\255\255\255\255\
\070\001\071\001\072\001\007\001\074\001\255\255\255\255\255\255\
\012\001\079\001\014\001\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\030\001\255\255\255\255\255\255\255\255\035\001\
\255\255\255\255\038\001\255\255\040\001\041\001\042\001\043\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\053\001\255\255\055\001\255\255\255\255\255\255\255\255\
\255\255\255\255\062\001\255\255\064\001\255\255\255\255\067\001\
\255\255\255\255\070\001\071\001\072\001\007\001\074\001\255\255\
\255\255\255\255\012\001\079\001\014\001\255\255\255\255\255\255\
\018\001\019\001\020\001\021\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\030\001\255\255\255\255\255\255\
\255\255\035\001\255\255\255\255\038\001\255\255\040\001\041\001\
\042\001\043\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\053\001\255\255\055\001\255\255\255\255\
\255\255\255\255\255\255\255\255\062\001\255\255\064\001\255\255\
\255\255\067\001\255\255\255\255\070\001\071\001\072\001\007\001\
\074\001\255\255\255\255\255\255\012\001\079\001\014\001\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\030\001\255\255\
\255\255\255\255\255\255\035\001\255\255\255\255\038\001\255\255\
\040\001\041\001\042\001\043\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\053\001\255\255\055\001\
\255\255\255\255\255\255\255\255\255\255\255\255\062\001\255\255\
\064\001\255\255\255\255\067\001\255\255\255\255\070\001\071\001\
\072\001\007\001\074\001\255\255\255\255\255\255\012\001\079\001\
\014\001\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\030\001\255\255\255\255\255\255\255\255\035\001\255\255\255\255\
\038\001\255\255\040\001\041\001\042\001\043\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\053\001\
\255\255\055\001\255\255\255\255\255\255\255\255\255\255\255\255\
\062\001\255\255\064\001\255\255\255\255\067\001\255\255\255\255\
\070\001\071\001\072\001\007\001\074\001\255\255\255\255\255\255\
\012\001\079\001\014\001\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\030\001\255\255\255\255\255\255\255\255\035\001\
\255\255\255\255\038\001\255\255\040\001\041\001\042\001\043\001\
\255\255\255\255\255\255\255\255\255\255\255\255\005\001\255\255\
\007\001\053\001\255\255\055\001\255\255\255\255\255\255\255\255\
\255\255\255\255\062\001\255\255\064\001\020\001\021\001\067\001\
\255\255\255\255\070\001\071\001\072\001\255\255\074\001\030\001\
\255\255\255\255\255\255\079\001\035\001\255\255\255\255\038\001\
\255\255\040\001\041\001\042\001\043\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\053\001\255\255\
\002\001\255\255\004\001\058\001\006\001\255\255\255\255\009\001\
\010\001\064\001\255\255\255\255\067\001\255\255\255\255\070\001\
\255\255\255\255\255\255\074\001\022\001\255\255\024\001\025\001\
\026\001\255\255\255\255\255\255\255\255\255\255\032\001\033\001\
\255\255\255\255\255\255\255\255\038\001\039\001\040\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\001\
\255\255\004\001\255\255\006\001\255\255\255\255\009\001\010\001\
\002\001\255\255\004\001\255\255\006\001\255\255\064\001\009\001\
\255\255\067\001\255\255\022\001\070\001\024\001\025\001\026\001\
\255\255\255\255\255\255\255\255\022\001\032\001\033\001\255\255\
\026\001\255\255\255\255\038\001\039\001\255\255\032\001\255\255\
\255\255\255\255\002\001\255\255\004\001\039\001\006\001\255\255\
\255\255\009\001\255\255\002\001\255\255\004\001\255\255\006\001\
\255\255\255\255\009\001\255\255\255\255\064\001\022\001\255\255\
\067\001\255\255\026\001\070\001\255\255\255\255\064\001\022\001\
\032\001\067\001\255\255\026\001\070\001\255\255\002\001\039\001\
\004\001\032\001\006\001\255\255\255\255\009\001\255\255\255\255\
\039\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\022\001\255\255\255\255\255\255\026\001\255\255\
\064\001\255\255\255\255\067\001\032\001\255\255\070\001\255\255\
\255\255\064\001\255\255\039\001\067\001\255\255\255\255\070\001\
\255\255\255\255\255\255\255\255\003\001\255\255\255\255\255\255\
\007\001\008\001\255\255\255\255\011\001\255\255\013\001\255\255\
\015\001\016\001\017\001\255\255\064\001\020\001\021\001\067\001\
\023\001\255\255\070\001\255\255\027\001\028\001\029\001\030\001\
\255\255\255\255\255\255\034\001\035\001\036\001\255\255\038\001\
\255\255\040\001\041\001\042\001\043\001\255\255\255\255\255\255\
\047\001\003\001\255\255\255\255\255\255\007\001\008\001\255\255\
\255\255\011\001\255\255\013\001\255\255\015\001\016\001\017\001\
\255\255\064\001\020\001\021\001\067\001\023\001\255\255\070\001\
\255\255\027\001\028\001\029\001\030\001\255\255\255\255\255\255\
\034\001\035\001\036\001\255\255\038\001\255\255\040\001\041\001\
\042\001\043\001\005\001\255\255\007\001\047\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\020\001\021\001\255\255\255\255\255\255\064\001\255\255\
\255\255\067\001\255\255\030\001\070\001\255\255\255\255\255\255\
\035\001\255\255\255\255\038\001\255\255\040\001\041\001\042\001\
\043\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\053\001\255\255\055\001\255\255\255\255\058\001\
\255\255\007\001\008\001\255\255\255\255\064\001\255\255\255\255\
\067\001\015\001\255\255\070\001\071\001\255\255\020\001\021\001\
\255\255\023\001\255\255\255\255\255\255\027\001\028\001\029\001\
\030\001\255\255\255\255\255\255\255\255\035\001\036\001\255\255\
\038\001\255\255\040\001\041\001\042\001\043\001\255\255\007\001\
\255\255\047\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\020\001\021\001\255\255\007\001\
\255\255\255\255\064\001\255\255\255\255\067\001\030\001\255\255\
\070\001\255\255\255\255\035\001\020\001\021\001\038\001\255\255\
\040\001\041\001\042\001\043\001\255\255\255\255\030\001\255\255\
\255\255\255\255\255\255\035\001\255\255\053\001\038\001\255\255\
\040\001\041\001\042\001\043\001\255\255\255\255\007\001\255\255\
\064\001\255\255\255\255\067\001\255\255\255\255\070\001\255\255\
\255\255\255\255\058\001\020\001\021\001\255\255\007\001\255\255\
\064\001\255\255\255\255\067\001\255\255\030\001\070\001\255\255\
\255\255\255\255\035\001\020\001\021\001\038\001\255\255\040\001\
\041\001\042\001\043\001\255\255\255\255\030\001\255\255\255\255\
\255\255\255\255\035\001\255\255\255\255\038\001\255\255\040\001\
\041\001\042\001\043\001\255\255\255\255\255\255\255\255\064\001\
\255\255\255\255\067\001\255\255\255\255\070\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\064\001\
\255\255\255\255\067\001\255\255\255\255\070\001"

let yynames_const = "\
  "

let yynames_block = "\
  IMPORT\000\
  TBOT\000\
  LAMBDA\000\
  TTOP\000\
  AS\000\
  USTRING\000\
  UNIT\000\
  REF\000\
  UUNIT\000\
  RREF\000\
  CASE\000\
  OF\000\
  LET\000\
  IN\000\
  FIX\000\
  LETREC\000\
  IF\000\
  THEN\000\
  ELSE\000\
  TRUE\000\
  FALSE\000\
  BOOL\000\
  TIMESFLOAT\000\
  SSOURCE\000\
  SSINK\000\
  UFLOAT\000\
  SUCC\000\
  PRED\000\
  ISZERO\000\
  INERT\000\
  TYPE\000\
  NAT\000\
  THREAD\000\
  ACQUIRE\000\
  FORK\000\
  WAIT\000\
  TID\000\
  MUTEX\000\
  UCID\000\
  LCID\000\
  INTV\000\
  FLOATV\000\
  STRINGV\000\
  APOSTROPHE\000\
  DQUOTE\000\
  ARROW\000\
  BANG\000\
  BARGT\000\
  BARRCURLY\000\
  BARRSQUARE\000\
  COLON\000\
  COLONCOLON\000\
  COLONEQ\000\
  COLONHASH\000\
  COMMA\000\
  DARROW\000\
  DDARROW\000\
  DOT\000\
  EOF\000\
  EQ\000\
  EQEQ\000\
  EXISTS\000\
  GT\000\
  HASH\000\
  LCURLY\000\
  LCURLYBAR\000\
  LEFTARROW\000\
  LPAREN\000\
  LSQUARE\000\
  LSQUAREBAR\000\
  LT\000\
  RCURLY\000\
  RPAREN\000\
  RSQUARE\000\
  SEMI\000\
  SLASH\000\
  STAR\000\
  TRIANGLE\000\
  USCORE\000\
  VBAR\000\
  MMUTEX\000\
  TTHREAD\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 149 "parser.mly"
      ( fun ctx -> [],ctx )
# 817 "parser.ml"
               :  Syntax.context -> (Syntax.command list * Syntax.context) ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Command) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 :  Syntax.context -> (Syntax.command list * Syntax.context) ) in
    Obj.repr(
# 151 "parser.mly"
      ( fun ctx ->
          let cmd,ctx = _1 ctx in
          let cmds,ctx = _3 ctx in
          cmd::cmds,ctx )
# 829 "parser.ml"
               :  Syntax.context -> (Syntax.command list * Syntax.context) ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 158 "parser.mly"
                   ( fun ctx -> (Import(_2.v)),ctx )
# 837 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 160 "parser.mly"
      ( fun ctx -> (let t = _1 ctx in Eval(tmInfo t,t)),ctx )
# 844 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Binder) in
    Obj.repr(
# 162 "parser.mly"
      ( fun ctx -> ((Bind(_1.i,_1.v,_2 ctx)), addname ctx _1.v) )
# 852 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'TyBinder) in
    Obj.repr(
# 164 "parser.mly"
      ( fun ctx -> ((Bind(_1.i, _1.v, _2 ctx)), addname ctx _1.v) )
# 860 "parser.ml"
               : 'Command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 169 "parser.mly"
      ( fun ctx -> VarBind (_2 ctx))
# 868 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 171 "parser.mly"
      ( fun ctx -> TmAbbBind(_2 ctx, None) )
# 876 "parser.ml"
               : 'Binder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 176 "parser.mly"
                ( _1 )
# 883 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 178 "parser.mly"
      ( fun ctx -> TyRef(emptylockset,_2 ctx) )
# 891 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 180 "parser.mly"
      ( fun ctx -> TySource(emptylockset,_2 ctx) )
# 899 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 182 "parser.mly"
      ( fun ctx -> TySink(emptylockset,_2 ctx) )
# 907 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 185 "parser.mly"
      ( fun ctx -> TyMutex(_2.v) )
# 915 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'MutexFields) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 187 "parser.mly"
      ( fun ctx -> TyRef(_3, _5 ctx) )
# 926 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'MutexFields) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 189 "parser.mly"
        ( fun ctx -> TySource(_3, _5 ctx) )
# 937 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'MutexFields) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 191 "parser.mly"
        ( fun ctx -> TySink(_3, _5 ctx) )
# 948 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 193 "parser.mly"
        ( fun ctx -> TyThread(_2 ctx) )
# 956 "parser.ml"
               : 'Type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 198 "parser.mly"
           ( _2 )
# 965 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 200 "parser.mly"
      ( fun ctx -> TyBot )
# 972 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 202 "parser.mly"
      ( fun ctx -> TyTop )
# 979 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 204 "parser.mly"
      ( fun ctx -> TyString )
# 986 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 206 "parser.mly"
      ( fun ctx -> TyUnit )
# 993 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'FieldTypes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 208 "parser.mly"
      ( fun ctx ->
          TyVariant(_2 ctx 1) )
# 1003 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 211 "parser.mly"
      ( fun ctx -> TyBool )
# 1010 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 213 "parser.mly"
      ( fun ctx ->
          if isnamebound ctx _1.v then
            TyVar(name2index _1.i ctx _1.v, ctxlength ctx)
          else 
            TyId(_1.v) )
# 1021 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'FieldTypes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 219 "parser.mly"
      ( fun ctx ->
          TyRecord(_2 ctx 1) )
# 1031 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 222 "parser.mly"
      ( fun ctx -> TyFloat )
# 1038 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 224 "parser.mly"
      ( fun ctx -> TyNat )
# 1045 "parser.ml"
               : 'AType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'AType) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 230 "parser.mly"
     ( fun ctx -> TyArr(emptylockset, None,_1 ctx, _3 ctx) )
# 1054 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'AType) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'MutexFields) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 232 "parser.mly"
     ( fun ctx -> TyArr(_3, None,_1 ctx, _6 ctx) )
# 1066 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'AType) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string Support.Error.withinfo) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 234 "parser.mly"
    ( fun ctx -> TyArr(emptylockset, Some(_3.v),_1 ctx, _6 ctx) )
# 1078 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'AType) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'MutexFields) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : string Support.Error.withinfo) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'ArrowType) in
    Obj.repr(
# 236 "parser.mly"
    ( fun ctx -> TyArr(_3, Some(_6.v),_1 ctx, _9 ctx) )
# 1093 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AType) in
    Obj.repr(
# 238 "parser.mly"
            ( _1 )
# 1100 "parser.ml"
               : 'ArrowType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 242 "parser.mly"
      ( _1 )
# 1107 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 244 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _2.v in
          TmAbs(_1,emptylockset, _2.v, _4 ctx, _6 ctx1) )
# 1121 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 248 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx "_" in
          TmAbs(_1,emptylockset, "_", _4 ctx, _6 ctx1) )
# 1135 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'AppTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 252 "parser.mly"
      ( fun ctx -> TmAssign(_2, _1 ctx, _3 ctx) )
# 1144 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Cases) in
    Obj.repr(
# 254 "parser.mly"
      ( fun ctx ->
          TmCase(_1, _2 ctx, _4 ctx) )
# 1155 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 257 "parser.mly"
      ( fun ctx -> TmLet(_1, _2.v, _4 ctx, _6 (addname ctx _2.v)) )
# 1167 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 259 "parser.mly"
      ( fun ctx -> TmLet(_1, "_", _4 ctx, _6 (addname ctx "_")) )
# 1179 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'Type) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 261 "parser.mly"
      ( fun ctx -> 
          let ctx1 = addname ctx _2.v in 
          TmLet(_1, _2.v, TmFix(_1, TmAbs(_1,emptylockset, _2.v, _4 ctx, _6 ctx1)),
                _8 ctx1) )
# 1196 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 266 "parser.mly"
      ( fun ctx -> TmIf(_1, _2 ctx, _4 ctx, _6 ctx) )
# 1208 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 269 "parser.mly"
        ( fun ctx -> TmAcquire(_1,_2 ctx, _4 ctx) )
# 1218 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'MutexFields) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : string Support.Error.withinfo) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 271 "parser.mly"
        ( fun ctx ->
            let ctx1 = addname ctx _5.v in
            TmAbs(_1, _3, _5.v, _7 ctx, _9 ctx1) )
# 1235 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'MutexFields) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'Type) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 275 "parser.mly"
        ( fun ctx ->
            let ctx1 = addname ctx "_" in
            TmAbs(_5, _3, "_", _7 ctx, _9 ctx1) 
        )
# 1253 "parser.ml"
               : 'Term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 282 "parser.mly"
      ( _1 )
# 1260 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'AppTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 284 "parser.mly"
      ( fun ctx ->
          let e1 = _1 ctx in
          let e2 = _2 ctx in
          TmApp(tmInfo e1,e1,e2) )
# 1271 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 289 "parser.mly"
      ( fun ctx -> TmRef(_1, emptylockset , _2 ctx) )
# 1279 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 291 "parser.mly"
      ( fun ctx -> TmDeref(_1, _2 ctx) )
# 1287 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 293 "parser.mly"
      ( fun ctx ->
          TmFix(_1, _2 ctx) )
# 1296 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'PathTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 296 "parser.mly"
      ( fun ctx -> TmTimesfloat(_1, _2 ctx, _3 ctx) )
# 1305 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 298 "parser.mly"
      ( fun ctx -> TmSucc(_1, _2 ctx) )
# 1313 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 300 "parser.mly"
      ( fun ctx -> TmPred(_1, _2 ctx) )
# 1321 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 302 "parser.mly"
      ( fun ctx -> TmIsZero(_1, _2 ctx) )
# 1329 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 305 "parser.mly"
        ( fun ctx -> TmWait(_1,_2 ctx) )
# 1337 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'MutexFields) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'PathTerm) in
    Obj.repr(
# 307 "parser.mly"
        ( fun ctx -> TmRef(_1, _3, _5 ctx) )
# 1348 "parser.ml"
               : 'AppTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ATerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 313 "parser.mly"
      ( fun ctx -> TmAscribe(_2, _1 ctx, _3 ctx) )
# 1357 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ATerm) in
    Obj.repr(
# 315 "parser.mly"
      ( _1 )
# 1364 "parser.ml"
               : 'AscribeTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 319 "parser.mly"
      ( fun ctx i -> [] )
# 1370 "parser.ml"
               : 'FieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NEFieldTypes) in
    Obj.repr(
# 321 "parser.mly"
      ( _1 )
# 1377 "parser.ml"
               : 'FieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'FieldType) in
    Obj.repr(
# 325 "parser.mly"
      ( fun ctx i -> [_1 ctx i] )
# 1384 "parser.ml"
               : 'NEFieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'FieldType) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NEFieldTypes) in
    Obj.repr(
# 327 "parser.mly"
      ( fun ctx i -> (_1 ctx i) :: (_3 ctx (i+1)) )
# 1393 "parser.ml"
               : 'NEFieldTypes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 331 "parser.mly"
      ( fun ctx i -> (_1.v, _3 ctx) )
# 1402 "parser.ml"
               : 'FieldType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 333 "parser.mly"
      ( fun ctx i -> (string_of_int i, _1 ctx) )
# 1409 "parser.ml"
               : 'FieldType))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 337 "parser.mly"
      ( fun ctx ->
          TmProj(_2, _1 ctx, _3.v) )
# 1419 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'PathTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int Support.Error.withinfo) in
    Obj.repr(
# 340 "parser.mly"
      ( fun ctx ->
          TmProj(_2, _1 ctx, string_of_int _3.v) )
# 1429 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'AscribeTerm) in
    Obj.repr(
# 343 "parser.mly"
      ( _1 )
# 1436 "parser.ml"
               : 'PathTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 347 "parser.mly"
      ( _1 )
# 1443 "parser.ml"
               : 'TermSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Term) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'TermSeq) in
    Obj.repr(
# 349 "parser.mly"
      ( fun ctx ->
          TmApp(_2, TmAbs(_2, emptylockset,"_", TyUnit, _3 (addname ctx "_")), _1 ctx) )
# 1453 "parser.ml"
               : 'TermSeq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'TermSeq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 355 "parser.mly"
      ( _2 )
# 1462 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 357 "parser.mly"
      ( fun ctx ->
          TmVar(_1.i, name2index _1.i ctx _1.v, ctxlength ctx) )
# 1470 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 360 "parser.mly"
      ( fun ctx -> TmString(_1.i, _1.v) )
# 1477 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 362 "parser.mly"
      ( fun ctx -> TmUnit(_1) )
# 1484 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'Term) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 364 "parser.mly"
      ( fun ctx ->
          TmTag(_1, _2.v, _4 ctx, _7 ctx) )
# 1498 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 367 "parser.mly"
      ( fun ctx -> TmTrue(_1) )
# 1505 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 369 "parser.mly"
      ( fun ctx -> TmFalse(_1) )
# 1512 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float Support.Error.withinfo) in
    Obj.repr(
# 371 "parser.mly"
      ( fun ctx -> TmFloat(_1.i, _1.v) )
# 1519 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'Fields) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 373 "parser.mly"
      ( fun ctx ->
          TmRecord(_1, _2 ctx 1) )
# 1529 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int Support.Error.withinfo) in
    Obj.repr(
# 376 "parser.mly"
      ( fun ctx ->
          let rec f n = match n with
              0 -> TmZero(_1.i)
            | n -> TmSucc(_1.i, f (n-1))
          in f _1.v )
# 1540 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 382 "parser.mly"
      ( fun ctx -> TmInert(_1, _3 ctx) )
# 1550 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Term) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 385 "parser.mly"
        ( fun ctx -> TmThread(_1,_3 ctx) )
# 1560 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string Support.Error.withinfo) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Support.Error.info) in
    Obj.repr(
# 387 "parser.mly"
        ( fun ctx -> TmMutex(_1, _3.v) )
# 1570 "parser.ml"
               : 'ATerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Case) in
    Obj.repr(
# 390 "parser.mly"
      ( fun ctx -> [_1 ctx] )
# 1577 "parser.ml"
               : 'Cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Case) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Cases) in
    Obj.repr(
# 392 "parser.mly"
      ( fun ctx -> (_1 ctx) :: (_3 ctx) )
# 1586 "parser.ml"
               : 'Cases))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string Support.Error.withinfo) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Support.Error.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string Support.Error.withinfo) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Support.Error.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'AppTerm) in
    Obj.repr(
# 396 "parser.mly"
      ( fun ctx ->
          let ctx1 = addname ctx _4.v in
          (_2.v, (_4.v, _7 ctx1)) )
# 1601 "parser.ml"
               : 'Case))
; (fun __caml_parser_env ->
    Obj.repr(
# 402 "parser.mly"
      ( fun ctx i -> [] )
# 1607 "parser.ml"
               : 'Fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'NEFields) in
    Obj.repr(
# 404 "parser.mly"
      ( _1 )
# 1614 "parser.ml"
               : 'Fields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Field) in
    Obj.repr(
# 408 "parser.mly"
      ( fun ctx i -> [_1 ctx i] )
# 1621 "parser.ml"
               : 'NEFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'Field) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NEFields) in
    Obj.repr(
# 410 "parser.mly"
      ( fun ctx i -> (_1 ctx i) :: (_3 ctx (i+1)) )
# 1630 "parser.ml"
               : 'NEFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 414 "parser.mly"
      ( fun ctx i -> (_1.v, _3 ctx) )
# 1639 "parser.ml"
               : 'Field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'Term) in
    Obj.repr(
# 416 "parser.mly"
      ( fun ctx i -> (string_of_int i, _1 ctx) )
# 1646 "parser.ml"
               : 'Field))
; (fun __caml_parser_env ->
    Obj.repr(
# 420 "parser.mly"
      ( fun ctx -> TyVarBind )
# 1652 "parser.ml"
               : 'TyBinder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'Type) in
    Obj.repr(
# 422 "parser.mly"
      ( fun ctx -> TyAbbBind(_2 ctx) )
# 1660 "parser.ml"
               : 'TyBinder))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string Support.Error.withinfo) in
    Obj.repr(
# 426 "parser.mly"
      ( newlockset _1.v )
# 1667 "parser.ml"
               : 'MutexFields))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string Support.Error.withinfo) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Support.Error.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'MutexFields) in
    Obj.repr(
# 428 "parser.mly"
      ( appendlock _1.v _3 )
# 1676 "parser.ml"
               : 'MutexFields))
(* Entry toplevel *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let toplevel (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf :  Syntax.context -> (Syntax.command list * Syntax.context) )
